/* The following code was generated by JFlex 1.4.3 on 23/02/21 06:09 PM */

package LexicRules;
import static LexicRules.Tokens.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 23/02/21 06:09 PM from the specification file
 * <tt>C:/Users/Angel Diaz/Documents/NetBeansProjects/LexicalAnalyzer/src/LexicRules/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\36\2\0\1\3\22\0\1\40\1\63\1\67\1\37"+
    "\1\4\1\64\1\62\1\0\1\51\1\52\1\61\1\57\1\3\1\60"+
    "\1\54\1\35\12\2\1\55\1\43\1\41\1\56\1\42\1\66\1\0"+
    "\1\45\13\1\1\44\12\1\1\46\2\1\1\47\1\0\1\53\1\63"+
    "\2\0\1\5\1\11\1\15\1\22\1\13\1\23\1\27\1\17\1\21"+
    "\1\1\1\14\1\24\1\25\1\20\1\10\1\33\1\1\1\12\1\16"+
    "\1\7\1\6\1\34\1\31\1\26\1\32\1\30\1\47\1\65\1\50"+
    "\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\17\2\1\5\1\6"+
    "\2\5\1\6\1\2\3\6\6\5\1\1\1\0\20\2"+
    "\2\7\6\2\1\4\2\0\1\2\4\0\1\10\1\3"+
    "\30\2\2\0\1\11\1\0\15\2\2\0\1\3\7\2"+
    "\2\0\2\2\13\0\1\4\1\0\1\4\7\0\1\4";

  private static int [] zzUnpackAction() {
    int [] result = new int[148];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\160\0\250\0\340\0\u0118\0\u0150\0\u0188"+
    "\0\u01c0\0\u01f8\0\u0230\0\u0268\0\u02a0\0\u02d8\0\u0310\0\u0348"+
    "\0\u0380\0\u03b8\0\u03f0\0\u0428\0\u0460\0\u0498\0\u04d0\0\u0508"+
    "\0\70\0\u0540\0\u0578\0\u05b0\0\u05e8\0\u0620\0\u0658\0\u0690"+
    "\0\u06c8\0\70\0\u0700\0\u0738\0\u0770\0\u07a8\0\u07e0\0\u0818"+
    "\0\u0850\0\u0888\0\u08c0\0\u08f8\0\u0930\0\u0968\0\u09a0\0\u09d8"+
    "\0\u0a10\0\u0a48\0\u0a80\0\u0ab8\0\u0af0\0\160\0\u0b28\0\u0b60"+
    "\0\u0b98\0\u0bd0\0\u0c08\0\u0c40\0\u0c78\0\u0cb0\0\u0ce8\0\u0d20"+
    "\0\u0d58\0\u0d90\0\u0dc8\0\u0738\0\u0e00\0\70\0\u0770\0\u0e38"+
    "\0\u0e70\0\u0ea8\0\u0ee0\0\u0f18\0\u0f50\0\u0f88\0\u0fc0\0\u0ff8"+
    "\0\u1030\0\u1068\0\u10a0\0\u10d8\0\u1110\0\u1148\0\u1180\0\u11b8"+
    "\0\u11f0\0\u1228\0\u1260\0\u1298\0\u12d0\0\u1308\0\u1340\0\u1378"+
    "\0\u13b0\0\160\0\u13e8\0\u1420\0\u1458\0\u1490\0\u14c8\0\u1500"+
    "\0\u1538\0\u1570\0\u15a8\0\u15e0\0\u1618\0\u1650\0\u1688\0\u16c0"+
    "\0\u16f8\0\u1730\0\70\0\u1768\0\u17a0\0\u17d8\0\u1810\0\u1848"+
    "\0\u1880\0\u18b8\0\u18f0\0\u1928\0\u1960\0\u1998\0\u19d0\0\u1a08"+
    "\0\u1a40\0\u1a78\0\u1ab0\0\u1ae8\0\u1b20\0\u1b58\0\u1b90\0\u1bc8"+
    "\0\u1c00\0\u1c38\0\u1c70\0\u1ca8\0\u1ce0\0\u1d18\0\u1d50\0\u1d88"+
    "\0\u1dc0\0\u1df8\0\u1e30\0\70";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[148];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\2\1\6\1\7\1\10"+
    "\1\3\1\11\1\12\1\13\1\3\1\14\1\15\2\3"+
    "\1\16\1\17\1\20\1\21\2\3\1\22\1\3\1\23"+
    "\2\3\1\24\1\25\1\5\1\26\1\5\1\27\1\30"+
    "\1\31\1\32\2\3\2\31\1\33\2\31\1\34\1\35"+
    "\1\36\1\37\1\40\1\36\1\41\1\36\1\42\1\43"+
    "\1\42\1\44\71\0\2\3\2\0\30\3\7\0\3\3"+
    "\23\0\1\4\51\0\1\45\16\0\1\5\32\0\1\5"+
    "\1\0\1\5\30\0\2\3\2\0\1\3\1\46\26\3"+
    "\7\0\3\3\22\0\2\3\2\0\13\3\1\47\14\3"+
    "\7\0\3\3\22\0\2\3\2\0\25\3\1\50\2\3"+
    "\7\0\3\3\22\0\2\3\2\0\5\3\1\51\22\3"+
    "\7\0\3\3\22\0\2\3\2\0\6\3\1\52\21\3"+
    "\7\0\3\3\22\0\2\3\2\0\13\3\1\53\3\3"+
    "\1\54\1\3\1\55\6\3\7\0\3\3\22\0\2\3"+
    "\2\0\1\54\2\3\1\56\6\3\1\57\1\3\1\60"+
    "\13\3\7\0\3\3\22\0\2\3\2\0\2\3\1\61"+
    "\7\3\1\62\1\3\1\63\7\3\1\64\3\3\7\0"+
    "\3\3\22\0\2\3\2\0\13\3\1\65\2\3\1\66"+
    "\11\3\7\0\3\3\22\0\2\3\2\0\3\3\1\67"+
    "\2\3\1\70\21\3\7\0\3\3\22\0\2\3\2\0"+
    "\3\3\1\71\13\3\1\72\10\3\7\0\3\3\22\0"+
    "\2\3\2\0\3\3\1\73\24\3\7\0\3\3\22\0"+
    "\2\3\2\0\3\3\1\46\24\3\7\0\3\3\22\0"+
    "\2\3\2\0\12\3\1\74\15\3\7\0\3\3\22\0"+
    "\2\3\2\0\3\3\1\75\24\3\7\0\3\3\56\0"+
    "\1\76\20\0\1\42\32\0\1\77\1\100\106\0\1\36"+
    "\14\0\1\42\53\0\1\36\13\0\1\42\12\0\2\3"+
    "\2\0\30\3\7\0\1\3\1\101\1\3\101\0\1\102"+
    "\63\0\1\103\70\0\1\42\70\0\1\42\67\0\2\42"+
    "\66\0\1\42\1\0\1\42\65\0\1\42\3\0\1\42"+
    "\72\0\1\42\3\0\52\104\1\105\2\104\1\0\1\104"+
    "\1\0\2\104\1\0\1\104\2\0\1\106\2\0\1\107"+
    "\66\0\2\3\2\0\2\3\1\110\25\3\7\0\3\3"+
    "\22\0\2\3\2\0\11\3\1\111\2\3\1\112\13\3"+
    "\7\0\3\3\22\0\2\3\2\0\26\3\1\113\1\3"+
    "\7\0\3\3\22\0\2\3\2\0\6\3\1\114\21\3"+
    "\7\0\3\3\22\0\2\3\2\0\2\3\1\115\17\3"+
    "\1\116\5\3\7\0\3\3\22\0\2\3\2\0\1\3"+
    "\1\117\26\3\7\0\3\3\22\0\2\3\2\0\11\3"+
    "\1\120\16\3\7\0\3\3\22\0\2\3\2\0\2\3"+
    "\1\121\25\3\7\0\3\3\22\0\2\3\2\0\1\3"+
    "\1\65\11\3\1\122\14\3\7\0\3\3\22\0\2\3"+
    "\2\0\1\71\27\3\7\0\3\3\22\0\2\3\2\0"+
    "\13\3\1\66\14\3\7\0\3\3\22\0\2\3\2\0"+
    "\1\123\4\3\1\124\22\3\7\0\3\3\22\0\2\3"+
    "\2\0\3\3\1\125\24\3\7\0\3\3\22\0\2\3"+
    "\2\0\22\3\1\126\1\127\4\3\7\0\3\3\22\0"+
    "\2\3\2\0\14\3\1\130\13\3\7\0\3\3\22\0"+
    "\2\3\2\0\2\3\1\66\25\3\7\0\3\3\22\0"+
    "\2\3\2\0\1\3\1\131\26\3\7\0\3\3\22\0"+
    "\2\3\2\0\16\3\1\132\11\3\7\0\3\3\22\0"+
    "\2\3\2\0\5\3\1\66\22\3\7\0\3\3\22\0"+
    "\2\3\2\0\3\3\1\133\24\3\7\0\3\3\22\0"+
    "\2\3\2\0\13\3\1\134\14\3\7\0\3\3\22\0"+
    "\2\3\2\0\14\3\1\135\13\3\7\0\3\3\22\0"+
    "\2\3\2\0\14\3\1\136\2\3\1\137\10\3\7\0"+
    "\3\3\21\0\36\76\1\0\31\76\20\0\1\140\62\0"+
    "\1\141\55\0\2\3\2\0\30\3\7\0\2\3\1\142"+
    "\23\0\1\143\141\0\1\31\63\0\1\104\20\0\2\3"+
    "\2\0\3\3\1\66\24\3\7\0\3\3\22\0\2\3"+
    "\2\0\14\3\1\144\13\3\7\0\3\3\22\0\2\3"+
    "\2\0\3\3\1\60\24\3\7\0\3\3\22\0\2\3"+
    "\2\0\6\3\1\145\21\3\7\0\3\3\22\0\2\3"+
    "\2\0\1\146\27\3\7\0\3\3\22\0\2\3\2\0"+
    "\1\3\1\147\26\3\7\0\3\3\22\0\2\3\2\0"+
    "\14\3\1\150\13\3\7\0\3\3\22\0\2\3\2\0"+
    "\20\3\1\66\7\3\7\0\3\3\22\0\2\3\2\0"+
    "\6\3\1\66\21\3\7\0\3\3\22\0\2\3\2\0"+
    "\6\3\1\147\21\3\7\0\3\3\22\0\2\3\2\0"+
    "\2\3\1\151\6\3\1\65\16\3\7\0\3\3\22\0"+
    "\2\3\2\0\2\3\1\152\25\3\7\0\3\3\22\0"+
    "\2\3\2\0\1\3\1\153\26\3\7\0\3\3\22\0"+
    "\2\3\2\0\5\3\1\65\22\3\7\0\3\3\22\0"+
    "\2\3\2\0\13\3\1\154\14\3\7\0\3\3\22\0"+
    "\2\3\2\0\6\3\1\155\21\3\7\0\3\3\22\0"+
    "\2\3\2\0\2\3\1\156\25\3\7\0\3\3\22\0"+
    "\2\3\2\0\4\3\1\135\23\3\7\0\3\3\22\0"+
    "\2\3\2\0\1\157\27\3\7\0\3\3\22\0\2\3"+
    "\2\0\1\65\27\3\7\0\3\3\22\0\2\3\2\0"+
    "\22\3\1\66\5\3\7\0\3\3\22\0\2\3\2\0"+
    "\17\3\1\120\10\3\7\0\3\3\22\0\2\3\2\0"+
    "\15\3\1\66\12\3\7\0\3\3\22\0\2\3\2\0"+
    "\1\160\27\3\7\0\3\3\36\0\1\161\75\0\1\162"+
    "\46\0\1\143\47\0\1\163\16\0\2\3\2\0\22\3"+
    "\1\126\5\3\7\0\3\3\22\0\2\3\2\0\15\3"+
    "\1\164\12\3\7\0\3\3\22\0\2\3\2\0\7\3"+
    "\1\66\20\3\7\0\3\3\22\0\2\3\2\0\5\3"+
    "\1\60\22\3\7\0\3\3\22\0\2\3\2\0\11\3"+
    "\1\165\16\3\7\0\3\3\22\0\2\3\2\0\14\3"+
    "\1\166\13\3\7\0\3\3\22\0\2\3\2\0\14\3"+
    "\1\167\13\3\7\0\3\3\22\0\2\3\2\0\10\3"+
    "\1\65\17\3\7\0\3\3\22\0\2\3\2\0\6\3"+
    "\1\136\21\3\7\0\3\3\22\0\2\3\2\0\3\3"+
    "\1\170\24\3\7\0\3\3\22\0\2\3\2\0\10\3"+
    "\1\171\17\3\7\0\3\3\22\0\2\3\2\0\1\3"+
    "\1\172\26\3\7\0\3\3\22\0\2\3\2\0\2\3"+
    "\1\74\25\3\7\0\3\3\45\0\1\173\64\0\1\174"+
    "\47\0\2\3\2\0\6\3\1\170\21\3\7\0\3\3"+
    "\22\0\2\3\2\0\2\3\1\175\25\3\7\0\3\3"+
    "\22\0\2\3\2\0\13\3\1\176\14\3\7\0\3\3"+
    "\22\0\2\3\2\0\10\3\1\66\17\3\7\0\3\3"+
    "\22\0\2\3\2\0\16\3\1\66\11\3\7\0\3\3"+
    "\22\0\2\3\2\0\12\3\1\66\15\3\7\0\3\3"+
    "\22\0\2\3\2\0\17\3\1\65\10\3\7\0\3\3"+
    "\27\0\1\177\101\0\1\200\50\0\2\3\2\0\6\3"+
    "\1\71\21\3\7\0\3\3\22\0\2\3\2\0\1\3"+
    "\1\120\26\3\7\0\3\3\43\0\1\201\60\0\1\202"+
    "\67\0\1\203\57\0\1\204\32\0\1\204\1\0\1\204"+
    "\67\0\1\205\30\0\1\206\1\0\1\204\1\0\30\206"+
    "\1\0\1\204\1\0\1\204\3\0\3\206\62\0\1\207"+
    "\27\0\2\206\1\210\1\0\30\206\1\0\1\210\1\0"+
    "\1\210\3\0\3\206\42\0\1\211\50\0\1\212\1\210"+
    "\32\0\1\210\1\0\1\210\37\0\1\213\61\0\1\212"+
    "\1\214\32\0\1\214\1\0\1\214\2\0\1\214\42\0"+
    "\1\215\54\0\1\214\32\0\1\214\1\0\1\214\2\0"+
    "\1\214\33\0\1\216\72\0\1\217\70\0\1\220\61\0"+
    "\1\221\107\0\1\222\104\0\1\223\70\0\1\224\24\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7784];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\26\1\1\11\10\1\1\11\2\1\1\0"+
    "\31\1\2\0\1\1\4\0\1\11\31\1\2\0\1\1"+
    "\1\0\15\1\2\0\1\11\7\1\2\0\2\1\13\0"+
    "\1\1\1\0\1\1\7\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[148];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 142) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 2: 
          { lexeme=yytext(); return Identifier;
          }
        case 10: break;
        case 7: 
          { lexeme=yytext(); return Keyword;
          }
        case 11: break;
        case 1: 
          { return ERROR;
          }
        case 12: break;
        case 6: 
          { lexeme=yytext(); return Special;
          }
        case 13: break;
        case 9: 
          { lexeme = Integer.toString(100000); return Number;
          }
        case 14: break;
        case 3: 
          { lexeme=yytext(); return Number;
          }
        case 15: break;
        case 8: 
          { lexeme=yytext(); return Literal;
          }
        case 16: break;
        case 4: 
          { /*Ignore*/
          }
        case 17: break;
        case 5: 
          { lexeme=yytext(); return Operator;
          }
        case 18: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
