/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package LexicRules;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.Reader;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Angel Diaz
 */
public class FrmPrincipal extends javax.swing.JFrame {
    /**
     * Creates new form FrmPrincipal
     */
    public FrmPrincipal() {
        initComponents();
        jScrollPane1.setBorder(null);
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup = new javax.swing.ButtonGroup();
        lblLiteralText = new javax.swing.JLabel();
        lblKeywordVal = new javax.swing.JLabel();
        lblSpecialVal = new javax.swing.JLabel();
        lblNumVal = new javax.swing.JLabel();
        lblIdVal = new javax.swing.JLabel();
        lblOperatorVal = new javax.swing.JLabel();
        lblLiteralVal = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        lblInput = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtInput = new javax.swing.JTextArea();
        lblInput1 = new javax.swing.JLabel();
        lblPath = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        lblConsole = new javax.swing.JLabel();
        lblKeywordText = new javax.swing.JLabel();
        lblSpecialText = new javax.swing.JLabel();
        lblNumText = new javax.swing.JLabel();
        btnAnalyze = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtResult = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbTokens = new javax.swing.JTable();
        txtPath = new javax.swing.JTextField();
        btnPath = new javax.swing.JButton();
        lblIdText = new javax.swing.JLabel();
        lblOperatorText = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setAutoRequestFocus(false);
        setBackground(new java.awt.Color(89, 107, 150));
        setResizable(false);

        lblLiteralText.setFont(new java.awt.Font("Open Sans", 0, 14)); // NOI18N
        lblLiteralText.setText("Literales:");

        lblKeywordVal.setFont(new java.awt.Font("Open Sans", 0, 14)); // NOI18N
        lblKeywordVal.setText("0");

        lblSpecialVal.setFont(new java.awt.Font("Open Sans", 0, 14)); // NOI18N
        lblSpecialVal.setText("0");

        lblNumVal.setFont(new java.awt.Font("Open Sans", 0, 14)); // NOI18N
        lblNumVal.setText("0");

        lblIdVal.setFont(new java.awt.Font("Open Sans", 0, 14)); // NOI18N
        lblIdVal.setText("0");

        lblOperatorVal.setFont(new java.awt.Font("Open Sans", 0, 14)); // NOI18N
        lblOperatorVal.setText("0");

        lblLiteralVal.setFont(new java.awt.Font("Open Sans", 0, 14)); // NOI18N
        lblLiteralVal.setText("0");

        jLabel1.setFont(new java.awt.Font("Open Sans", 1, 14)); // NOI18N
        jLabel1.setText("Tabla de categorías");

        lblInput.setFont(new java.awt.Font("Open Sans", 1, 14)); // NOI18N
        lblInput.setText("Ingrese código a analizar");

        txtInput.setColumns(20);
        txtInput.setFont(new java.awt.Font("JetBrainsMonoMedium Nerd Font", 0, 12)); // NOI18N
        txtInput.setRows(5);
        jScrollPane3.setViewportView(txtInput);

        lblInput1.setFont(new java.awt.Font("Open Sans", 1, 14)); // NOI18N
        lblInput1.setText("Tabla de lexemas");

        lblPath.setFont(new java.awt.Font("Open Sans", 1, 14)); // NOI18N
        lblPath.setText("O cargue desde archivo");

        jTable1.setFont(new java.awt.Font("Open Sans", 0, 14)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Palabras reservadas", "100"},
                {"Símbolos especiales", "200"},
                {"Operadores", "300"},
                {"Identificadores", "400"},
                {"Constantes numéricas", "500"},
                {"Literales", "600"}
            },
            new String [] {
                "Patrón", "Clase"
            }
        ));
        jTable1.setEnabled(false);
        jScrollPane4.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(1).setMaxWidth(50);
        }

        jLabel2.setFont(new java.awt.Font("Open Sans", 1, 14)); // NOI18N
        jLabel2.setText("Lexemas encontrados");

        lblConsole.setFont(new java.awt.Font("Open Sans", 1, 14)); // NOI18N
        lblConsole.setText("Consola");

        lblKeywordText.setFont(new java.awt.Font("Open Sans", 0, 14)); // NOI18N
        lblKeywordText.setText("Palabras reservadas:");

        lblSpecialText.setFont(new java.awt.Font("Open Sans", 0, 14)); // NOI18N
        lblSpecialText.setText("Símbolos especiales:");

        lblNumText.setFont(new java.awt.Font("Open Sans", 0, 14)); // NOI18N
        lblNumText.setText("Constantes numéricas:");

        btnAnalyze.setFont(new java.awt.Font("Open Sans", 0, 14)); // NOI18N
        btnAnalyze.setText("Analizar");
        btnAnalyze.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnalyzeActionPerformed(evt);
            }
        });

        txtResult.setColumns(20);
        txtResult.setFont(new java.awt.Font("JetBrainsMonoMedium Nerd Font", 0, 12)); // NOI18N
        txtResult.setRows(5);
        jScrollPane1.setViewportView(txtResult);

        tbTokens.setFont(new java.awt.Font("Open Sans", 0, 14)); // NOI18N
        tbTokens.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Lexema", "Clase", "Código"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tbTokens);
        if (tbTokens.getColumnModel().getColumnCount() > 0) {
            tbTokens.getColumnModel().getColumn(0).setResizable(false);
            tbTokens.getColumnModel().getColumn(1).setMaxWidth(100);
            tbTokens.getColumnModel().getColumn(2).setMaxWidth(100);
        }

        txtPath.setEditable(false);
        txtPath.setFont(new java.awt.Font("Open Sans", 0, 14)); // NOI18N

        btnPath.setFont(new java.awt.Font("Open Sans", 0, 14)); // NOI18N
        btnPath.setText("...");
        btnPath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPathActionPerformed(evt);
            }
        });

        lblIdText.setFont(new java.awt.Font("Open Sans", 0, 14)); // NOI18N
        lblIdText.setText("Identificadores: ");

        lblOperatorText.setFont(new java.awt.Font("Open Sans", 0, 14)); // NOI18N
        lblOperatorText.setText("Operadores:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 436, Short.MAX_VALUE)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addComponent(btnPath, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(btnAnalyze))
                        .addComponent(lblPath)
                        .addComponent(lblInput))
                    .addComponent(txtPath, javax.swing.GroupLayout.PREFERRED_SIZE, 309, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblInput1)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 334, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(10, 10, 10)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(lblKeywordText)
                                .addComponent(lblLiteralText)
                                .addComponent(lblNumText)
                                .addComponent(lblOperatorText)
                                .addComponent(lblSpecialText)
                                .addComponent(lblIdText))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(lblNumVal, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(lblLiteralVal, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(lblOperatorVal, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(lblIdVal, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(lblSpecialVal, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(lblKeywordVal)))
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblConsole)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 20, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblInput1)
                        .addComponent(lblInput)))
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 418, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblPath)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnPath)
                            .addComponent(btnAnalyze, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jLabel2)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(lblKeywordVal)
                                .addComponent(lblKeywordText))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(lblSpecialText)
                                .addComponent(lblSpecialVal))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(lblOperatorText)
                                .addComponent(lblOperatorVal))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(lblIdText)
                                .addComponent(lblIdVal))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(lblNumVal)
                                .addComponent(lblNumText))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(lblLiteralVal)
                                .addComponent(lblLiteralText))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(lblConsole)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jScrollPane2)))
                .addGap(20, 20, 20))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnPathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPathActionPerformed
        // Allows to choose a file from a File Chooser
        JFileChooser fileChooser = new JFileChooser();
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            // Set path of the file
            File file = fileChooser.getSelectedFile();
            txtPath.setText(file.getAbsolutePath());
            // Reading file
            try {
                BufferedReader br = new BufferedReader(new FileReader(file));
                String st, apndStr = "";
                while ((st = br.readLine()) != null)
                apndStr += st + "\n";
                txtInput.setText(apndStr);
            } catch (IOException ex) {
                Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else {
            System.out.println("File access cancelled by user.");
        }
    }//GEN-LAST:event_btnPathActionPerformed

    private void btnAnalyzeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnalyzeActionPerformed
        // File creation
        setLblCountZero();
        File archivo = new File("fileTrash.txt");
        PrintWriter escribir;
        try {
            escribir = new PrintWriter(archivo);
            escribir.print(txtInput.getText());
            escribir.close();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
        // Analyze file
        try {
            Analyze("fileTrash.txt");
        } catch (FileNotFoundException ex) {
            Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnAnalyzeActionPerformed

    private void setLblCountZero () {
        // Set all labels to 0
        lblKeywordVal.setText(Integer.toString(0));
        lblSpecialVal.setText(Integer.toString(0));
        lblOperatorVal.setText(Integer.toString(0));
        lblIdVal.setText(Integer.toString(0));
        lblNumVal.setText(Integer.toString(0));
        lblLiteralVal.setText(Integer.toString(0));
    }
    
    private void printTable(List<Object[]> data) {
        // Clear table
        DefaultTableModel model = (DefaultTableModel) tbTokens.getModel();
        for (int i = model.getRowCount() - 1; i >= 0; i--) 
            model.removeRow(i);
        // Set Tokens n' Lexeme data into table 
        data.forEach((row) -> {model.addRow(row);});
        
    }
    
    private void appendLexeme(List<Object[]> data, String lexeme, Tokens tokens) {
        int tkClass = getTokenClass(tokens);
        int tkCode = tkClass + 1;
        // Check if exist more items from that class and assign the propper code value
        tkCode = data.stream().filter((row) -> (tkClass == Integer.parseInt(row[1].toString()))).map((_item) -> 1).reduce(tkCode, Integer::sum);
        // Add data to list
        Object[] arr = new Object[3];
            arr[0] = lexeme;
            arr[1] = tkClass;
            arr[2] = tkCode;
        data.add(arr);
        // Update the quantity of lexemes found
        updateLabelCount(tokens, tkCode - tkClass);
    }
    
    private void updateLabelCount(Tokens tokens, int count) {
        // Update label's text by token
        switch (tokens) {
            case Keyword:
                lblKeywordVal.setText(Integer.toString(count));
                break;
            case Special:
                lblSpecialVal.setText(Integer.toString(count));
                break;
            case Operator: 
                lblOperatorVal.setText(Integer.toString(count));
                break;
            case Identifier: 
                lblIdVal.setText(Integer.toString(count));
                break;
            case Number: 
                lblNumVal.setText(Integer.toString(count));
                break;
            case Literal: 
                lblLiteralVal.setText(Integer.toString(count));
                break;
            case ERROR:
            default:
                break;
        }
    }
    
    private int getTokenClass(Tokens tokens) {
        // Returns token's class
        int code;
        switch (tokens) {
            case Keyword:
                code = 100;
                break;
            case Special:
                code = 200;
                break;
            case Operator: 
                code = 300;
                break;
            case Identifier: 
                code = 400;
                break;
            case Number: 
                code = 500;
                break;
            case Literal: 
                code = 600;
                break;
            case ERROR:
            default:
                code = 0;
                break;
        }
        return code;
    }
    
    private void Analyze(String path) throws FileNotFoundException, IOException {
        // Instances for lexic analysis
        Reader lector = new BufferedReader(new FileReader(path));
        Lexer lexer = new Lexer(lector);
        String result = "";
        // List of lexemes
        List<Object[]> row = new ArrayList<>();
        // Analyze while it can read a token
        while (true) {
            Tokens tokens = lexer.yylex();
            // If it's last token, end analysis
            if (tokens == null) {
                printTable(row);
                result += "Analysis completed";
                txtResult.setText(result);
                return;
            }
            // Switch token to save into list and print in program's console
            switch (tokens) {
                case ERROR:
                    JOptionPane.showMessageDialog(null, "No se pudo leer uno de los caracteres. "
                            + "Asegúrese que todos los caracteres escritos sean válidos.\n"
                            + "Consultar tabla de caracteres ASCII 0-127", 
                            "InfoBox: Error de lectura", JOptionPane.ERROR_MESSAGE);
                    result += "Not defined symbol\n";
                    break;
                case Identifier: case Number: case Keyword:case Literal: 
                case Special:case Operator: 
                    appendLexeme(row, lexer.lexeme, tokens);
                    result += lexer.lexeme + " is " + tokens + "\n";
                    break;
                default:
                    result += "Token: " + tokens + "\n";
                    break;
            }
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmPrincipal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAnalyze;
    private javax.swing.JButton btnPath;
    private javax.swing.ButtonGroup buttonGroup;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel lblConsole;
    private javax.swing.JLabel lblIdText;
    private javax.swing.JLabel lblIdVal;
    private javax.swing.JLabel lblInput;
    private javax.swing.JLabel lblInput1;
    private javax.swing.JLabel lblKeywordText;
    private javax.swing.JLabel lblKeywordVal;
    private javax.swing.JLabel lblLiteralText;
    private javax.swing.JLabel lblLiteralVal;
    private javax.swing.JLabel lblNumText;
    private javax.swing.JLabel lblNumVal;
    private javax.swing.JLabel lblOperatorText;
    private javax.swing.JLabel lblOperatorVal;
    private javax.swing.JLabel lblPath;
    private javax.swing.JLabel lblSpecialText;
    private javax.swing.JLabel lblSpecialVal;
    private javax.swing.JTable tbTokens;
    private javax.swing.JTextArea txtInput;
    private javax.swing.JTextField txtPath;
    private javax.swing.JTextArea txtResult;
    // End of variables declaration//GEN-END:variables
}
